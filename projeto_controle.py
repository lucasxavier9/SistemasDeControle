# -*- coding: utf-8 -*-
"""Projeto-Controle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vitpSliBI6goAcaaEtmTW6USjJ2CQzKK
"""

!pip install control

"""# Def. Função Transferência"""

#Função tranferência da malha aberta:

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([2.4767])
den = np.array([1, 6.0476, 5.2856, 0.238])
H = control.tf(num , den)
H

#Função tranferência da malha fechada:

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])
H = control.tf(num , den)
H

"""# Aplicando uma entrada em Degrau"""

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([2.4767])
den = np.array([1, 6.0476, 5.2856, 0.238])
H = control.tf(num, den)

t0 = 0
tend = 200
dt = 1e-4
Npontos = int((tend - t0) / dt)
T = np.linspace(t0, tend, Npontos)
t, y = control.step_response(H, T)

plt.figure(figsize=(8, 6))

plt.plot(t, y, label='Resposta ao Degrau', color='b', linestyle='-', linewidth=2)

plt.title('Resposta ao Degrau da Função Transferência em malha aberta G(s)')
plt.xlabel('Tempo (s)')
plt.ylabel('Saída')
plt.grid(True)

plt.legend()
plt.xlim([t0, tend])
plt.ylim([0, 1.30 * max(y)])

plt.show()

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])
H = control.tf(num, den)

t0 = 0
tend = 20
dt = 1e-4
Npontos = int((tend - t0) / dt)
T = np.linspace(t0, tend, Npontos)
t, y = control.step_response(H, T)


plt.figure(figsize=(8, 6))

plt.plot(t, y, label='Resposta ao Degrau', color='b', linestyle='-', linewidth=2)

plt.title('Resposta ao Degrau da Função Transferência em malha fechada T(s)')
plt.xlabel('Tempo (s)')
plt.ylabel('Saída')
plt.grid(True)

plt.legend()
plt.xlim([t0, tend])
plt.ylim([0, 1.30 * max(y)])

plt.show()



"""# Polos e Zeros da FT em malha fechada e malha aberta:"""

#MALHA ABERTA

num = np.array([2.4767])
den = np.array([1, 6.0476, 5.2856, 0.238])
H = control.tf(num , den)
H
control.pzmap(H)

#MALHA FECHADA

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])
H = control.tf(num , den)
H
control.pzmap(H)

"""# Tempo de Pico; Tempo De acomodação; Tempo de subida; Ultrapassagem percentual"""

import numpy as np
import matplotlib.pyplot as plt
from scipy import signal

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])

sys = signal.TransferFunction(num, den)

t, y = signal.step(sys)

zeros= np.round(sys.zeros, 2)
polos= np.round(sys.poles, 2)
print("Zeros: ", zeros)
print("Polos: ", polos)
parte_real = np.real(polos)
modulo_real = np.abs(parte_real[0])
parte_imaginaria = np.imag(polos)
modulo_imaginario = np.abs(parte_imaginaria[0])

valor_final = y[-1]

Tp = np.pi/modulo_imaginario
indice_pico = np.argmin(np.abs(t - Tp))
valor_pico = y[indice_pico]

Ts = 4/modulo_real

UP=((valor_pico-valor_final)/valor_final)*100

angulo= np.arctan(modulo_imaginario/modulo_real)
Tr = (np.pi-angulo)/modulo_imaginario
print("Tempo de Pico:", round(Tp, 6), "segundos")
print("Tempo de Acomodação:", round(Ts, 6), "segundos")
print("Tempo de Subida:", round(Tr, 6), "segundos")
print("Ultapassem percentual:", round(UP, 2), "%")

"""#Aplicando uma entrada em Rampa"""

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])
H = control.tf(num, den)

t0 = 0
tend = 20
dt = 1e-4
T = np.arange(t0, tend, dt)

k = 0.1
ramp_input = k * T

t, y_ramp = control.forced_response(H, T, ramp_input)


plt.figure(figsize=(8, 6))

plt.plot(t, ramp_input, 'r--', label='Entrada em Rampa')
plt.plot(t, y_ramp, 'b', label='Saída')

plt.title('Resposta à Entrada em Rampa da Função de Transferência em malhda fechada T(s)')
plt.xlabel('Tempo (s)')
plt.ylabel('Amplitude')
plt.grid(True)

plt.legend()
plt.xlim([t0, tend])

plt.show()

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([2.4767])
den = np.array([1, 6.0476, 5.2856, 0.238])
H = control.tf(num, den)

t0 = 0
tend = 200
dt = 1e-4
T = np.arange(t0, tend, dt)


k = 1
ramp_input = k * T

t, y_ramp = control.forced_response(H, T, ramp_input)

plt.figure(figsize=(8, 6))

plt.plot(t, ramp_input, 'r--', label='Entrada em Rampa')
plt.plot(t, y_ramp, 'b', label='Saída')

plt.title('Resposta à Entrada em Rampa da Função da Transferência em malha aberta G(s)')
plt.xlabel('Tempo (s)')
plt.ylabel('Amplitude')
plt.grid(True)

plt.legend()
plt.xlim([t0, tend])
plt.show()

"""# Aplicando uma entrada em Parábola"""

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])
H = control.tf(num, den)

t0 = 0
tend = 20
dt = 1e-4
T = np.arange(t0, tend, dt)

a = 0.1
parabola_input = a * T**2

t, y_parabola = control.forced_response(H, T, parabola_input)

plt.figure(figsize=(8, 6))

plt.plot(t, parabola_input, 'r--', label='Entrada em Parábola')
plt.plot(t, y_parabola, 'b', label='Saída')

plt.title('Resposta à Entrada em Parábola da Função de Transferência em malha fechada T(s)')
plt.xlabel('Tempo (s)')
plt.ylabel('Amplitude')
plt.grid(True)

plt.legend()
plt.xlim([t0, tend])
plt.show()

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([2.4767])
den = np.array([1, 6.0476, 5.2856, 0.238])
H = control.tf(num, den)

t0 = 0
tend = 200
dt = 1e-4
T = np.arange(t0, tend, dt)


a = 0.1
parabola_input = a * T**2

t, y_parabola = control.forced_response(H, T, parabola_input)

plt.figure(figsize=(8, 6))

plt.plot(t, parabola_input, 'r--', label='Entrada em Parábola')
plt.plot(t, y_parabola, 'b', label='Saída')

plt.title('Resposta à Entrada em Parábola da Função Transferência em malha aberta G(s)')  # Adicionar título
plt.xlabel('Tempo (s)')
plt.ylabel('Amplitude')
plt.grid(True)

plt.legend()
plt.xlim([t0, tend])
plt.show()

"""# Distúrbios"""

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])
H = control.tf(num, den)

t0 = 0
tend = 40
dt = 0.01
T = np.arange(t0, tend, dt)

step_input = np.ones(len(T))

disturbance_input = np.zeros(len(T))
disturbance_input[int(len(T)/4):int(len(T)/2)] = 1.0

t, y_step_with_disturbance = control.forced_response(H, T, step_input + disturbance_input)

plt.figure(figsize=(10, 6))

plt.plot(t, step_input + disturbance_input, 'r--', label='Distúrbio de degrau unitário')
plt.plot(t, y_step_with_disturbance, 'b', label='Resposta ao degrau com distúrbio de degrau')

plt.title('Resposta ao degrau com distúrbio na Função de Transferência')
plt.xlabel('Tempo (s)')
plt.ylabel('Saída')
plt.grid(True)
plt.legend()
plt.xlim([t0, tend])

plt.show()

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])
H = control.tf(num, den)

t0 = 0
tend = 10
dt = 0.01
T = np.arange(t0, tend, dt)

step_input = np.ones(len(T))

disturbance_input = np.linspace(0, 1, len(T))

t, y_step_with_ramp_disturbance = control.forced_response(H, T, step_input + disturbance_input)

plt.figure(figsize=(10, 6))

plt.plot(t, step_input + disturbance_input, 'r--', label='Distúrbio de rampa')
plt.plot(t, y_step_with_ramp_disturbance, 'b', label='Resposta ao degrau com distúrbio de rampa')

plt.title('Resposta ao degrau com distúrbio de Rampa na Função de Transferência')
plt.xlabel('Tempo (s)')
plt.ylabel('Saída')
plt.grid(True)
plt.legend()
plt.xlim([t0, tend])
plt.show()

import numpy as np
import control as control
import matplotlib.pyplot as plt

num = np.array([9.1563, 9.58485, 0.4180])
den = np.array([1, 6.0476, 14.4419, 9.8228, 0.4180])
H = control.tf(num, den)

t0 = 0
tend = 15
dt = 0.01
T = np.arange(t0, tend, dt)

step_input = np.ones(len(T))

disturbance_input = 0.5 * (T - tend/2)**2

t, y_step_with_parabolic_disturbance = control.forced_response(H, T, step_input + disturbance_input)

plt.figure(figsize=(10, 6))

plt.plot(t, step_input + disturbance_input, 'r--', label='Distúrbio de parábola')
plt.plot(t, y_step_with_parabolic_disturbance, 'b', label='Resposta ao degrau com distúrbio de parábola')

plt.title('Resposta ao degrau com distúrbio de Parábola a Função de Transferência')
plt.xlabel('Tempo (s)')
plt.ylabel('Saída')
plt.grid(True)
plt.legend()
plt.xlim([t0, tend])
plt.show()